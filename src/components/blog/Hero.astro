---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import FormattedDate from "../FormattedDate.astro";
import YouTubeEmbed from '../YouTubeEmbed.astro';
import Share from "@/components/Share.astro"
import { getEntry } from 'astro:content';
const siteSettings = await getEntry('siteSettings', 'main');
const { showTitles, showTags, showDates, showShare, showSocial } = siteSettings.data;
import SocialList from "@/components/SocialList.astro";




interface Props {
    content: CollectionEntry<"post">;
}

const {
    content: { data },
} = Astro.props;

const dateTimeOptions: Intl.DateTimeFormatOptions = {
    month: "long",
};
---
{
  (data.youtube && data.youtube.discriminant && data.youtube.value && data.youtube.value.url) ? (
    <YouTubeEmbed 
      title={data.youtube.value.title}
      url={data.youtube.value.url}
      controls={data.youtube.value.controls}
      mute={data.youtube.value.mute}
      loop={data.youtube.value.loop}
      start={data.youtube.value.start}
      end={data.youtube.value.end}
      useCustomPlayer={data.youtube.value.useCustomPlayer}
    />
  ) : data.coverImage && data.coverImage.src ? (
    <div class=" mb-6">
      <Image
        alt={data.coverImage.alt || ""}
        class="object-cover"
        fetchpriority="high"
        loading="eager"
        src={data.coverImage.src}
        width={800}
        height={450}
        style="margin:0 auto;"
      />
    </div>
  ) : null
}
{showShare && <Share />}

{showSocial && <SocialList />}

<div class="panel" style={{ padding: "4%", width:'90%', margin:'0 auto', maxWidth:'1400px', display:'' }}>
    {data.draft ? <span class="text-base text-red-500">(Draft)</span> : null}
    
    

    <!-- {typeof showTitles !== 'undefined' && showTitles && (
<span class="title sm:mb-1" style={`margin: 4% auto;`}>
    {data.title}
</span>
)}  -->

{typeof showDates !== 'undefined' && showDates && (
    <div class="flex flex-wrap items-center gap-x-3 gap-y-2">
        <p class="font-semibold">
            <FormattedDate date={data.publishDate} dateTimeOptions={dateTimeOptions} />
        </p>
        {data.updatedDate && (
            <span class="rounded-lg bg-quote/10 p-1 text-quote">
                Last Updated:{" "}
                <FormattedDate
                    date={data.updatedDate}
                    dateTimeOptions={dateTimeOptions}
                />
            </span>
        )}
    </div>
)}


{typeof showTags !== 'undefined' && showTags && (
    <>
      {data.tags && data.tags.length > 0 && (
        <div class="mt-3">
          <svg
            aria-hidden="true"
            class="inline-block h-6 w-6"
            fill="none"
            focusable="false"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="1.5"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M0 0h24v24H0z" fill="none" stroke="none" />
            <path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
            <path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
            <path d="M6 9h-.01" />
          </svg>
          {data.tags.map((tag: string, i: number) => (
            <>
              <a
                aria-label={`View more posts with the tag ${tag}`}
                class="pirate-link inline-block before:content-['#']"
                data-pagefind-filter="tag"
                href={`/tags/${tag}/`}
              >
                {tag}
              </a>
              {i < data.tags.length - 1 && ", "}
            </>
          ))}
        </div>
      )}
    </>
)}

</div>
</div>