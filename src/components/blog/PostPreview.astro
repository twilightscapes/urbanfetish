---

import { Image } from "astro:assets";
import YouTubeEmbed from '../YouTubeEmbed.astro';
import type { CollectionEntry } from "astro:content";
type Props = {
    post: CollectionEntry<"post">;
    withDesc?: boolean;
};
import { getEntry } from 'astro:content';
const { post, withDesc = false } = Astro.props;
const defaultImageSrc = `${import.meta.env.BASE_URL}socialCard.webp`;
const defaultImageWidth = 900; 
const defaultImageHeight = 600; 

const siteSettings = await getEntry('siteSettings', 'main');
const { showTitles } = siteSettings.data;

function getYouTubeId(url: string) {
  const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

function getYouTubeThumbnail(videoId: string) {
  return `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;
}


const videoId = post.data.youtube?.value?.url ? getYouTubeId(post.data.youtube.value.url) : null;
const thumbnailUrl = videoId ? getYouTubeThumbnail(videoId) : null;
const useCustomPlayer = post.data.youtube?.value?.useCustomPlayer ?? true;
---



<div class="post-card1">
    <div>
    {post.data.externalUrl ? (
        <div data-active="false" class="iframe-container inactive panel"
        style={{
                        display: "flex",
                        justifyContent: "space-between",
                        rowGap: "0",
                        columnGap: "0.4vw",
                        textAlign: "center",
                        flexDirection: "column",
                        padding: "1vh 1vw",
                        fontSize: "clamp(1rem, 1rem, 1rem)",
                    }}>
            <iframe
                src={post.data.externalUrl}
                title={post.data.title}
                width="100%"
                height="400"
                frameborder="0"
                allowfullscreen
                loading="lazy"
                class="exturl"
            ></iframe>
            <h2 class="title" style={{ color: "", fontSize: "clamp(1.3rem, 2.4vw, 1rem)" }}>{post.data.title}</h2>
        </div>
    ) : post.data.youtube?.discriminant && post.data.youtube.value?.videoOnly && thumbnailUrl ? (
        <div class="video-container" data-video-id={videoId} data-use-custom-player={useCustomPlayer}>
            <img
                src={thumbnailUrl}
                alt={post.data.youtube.value.title || "Video thumbnail"}
                class="object-contain video-thumbnail"
                loading="eager"
                fetchpriority="high"
                width={defaultImageWidth}
                height={defaultImageHeight}
            />
            
            <div class="play-button" aria-label="Play video">â–¶</div>
            <div class="youtube-embed" style="display: none;">
                <YouTubeEmbed
                    url={post.data.youtube.value.url || ''}
                    title={post.data.youtube.value.title}
                    controls={post.data.youtube.value.controls}
                    mute={post.data.youtube.value.mute}
                    loop={post.data.youtube.value.loop}
                    start={post.data.youtube.value.start}
                    end={post.data.youtube.value.end}
                    useCustomPlayer={useCustomPlayer}
                />
            </div>
            {showTitles && (
                        <h2 class="title" style={{ color: "", fontSize: "clamp(1.3rem, 2.4vw, 1rem)" }}>
                            {post.data.title}
                        </h2>
                    )}
        </div>
    ) : (
        <a href={`/posts/${post.slug}/`} class="pirate-link" rel="prefetch">
            {post.data.coverImage && typeof post.data.coverImage === "object" && post.data.coverImage.src ? (
                <Image
                    src={post.data.coverImage.src}
                    alt={post.data.coverImage.alt || "Cover image"}
                    class="object-contain"
                    loading="eager"
                    fetchpriority="high"
                    width={defaultImageWidth}
                    height={defaultImageHeight}
                />
            ) : (
                <Image
                    alt="Default Image Alt Text"
                    class="object-contain"
                    fetchpriority="high"
                    loading="eager"
                    src={defaultImageSrc}
                    width={defaultImageWidth}
                    height={defaultImageHeight}
                />
            )}
            
            {typeof showTitles !== 'undefined' && showTitles && (
                <div
                    class="panel"
                    style={{
                        display: "flex",
                        justifyContent: "space-between",
                        rowGap: "0",
                        columnGap: "0.4vw",
                        textAlign: "center",
                        flexDirection: "column",
                        padding: "1vh 1vw",
                        fontSize: "clamp(1rem, 1rem, 1rem)",
                    }}
                >
                    {showTitles && (
                        <h2 class="title" style={{ color: "", fontSize: "clamp(1.3rem, 2.4vw, 1rem)" }}>
                            {post.data.title}
                        </h2>
                    )}
                    {withDesc && (
                        <div class="line-clamp-1 block snippet" style={{ display: "none" }}>
                            {post.data.description}
                        </div>
                    )}
                </div>
            )}
        </a>
    )}
    </div>
</div>

<style>
    .iframe-container {
        position: relative;
        width: 100%;
        /* padding-bottom: 56.25%;  */
        aspect-ratio: 16/9;
        /* height: 0; */
        overflow: hidden;
    }

    .iframe-container iframe {
        position: relative;
        top: 0;
        left: 0;
        width: 100%;
        height: 90%;
        aspect-ratio: 16/9;
    }

    @media(hover:none) {
        .iframe-container iframe {z-index: 1; min-width: 100%;}
    }
    @media(max-width:48rem) {

    }
    
    .video-container {
        position: relative;
        /* width: 100%;
        height: 100%; */
    
    }
    .play-button {
        position: absolute;
        top: 45%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: 1px solid white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        font-size: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
        filter: drop-shadow(0px 0px 1px #f6f3f3) !important;
        box-shadow: 0 0 0 3px #111;
    }

/* .grid-container .video-container{max-height: 200px !important;} */



/* .slider .video-container, .slider .post-card1, .slider .custom-youtube-player{ min-width: 80vw !important;} */
.grid-container .custom-youtube-player {margin-bottom: 0;}
    .iframe-container.inactive::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        /* background-color: rgba(128, 128, 128, 0.5); */
        z-index: 1;
        display:grid;
        place-content: center;
        color:white;
    }
</style>
<script>
  document.querySelectorAll('.video-container').forEach(container => {
    const playButton = container.querySelector('.play-button') as HTMLElement;
    const thumbnail = container.querySelector('.video-thumbnail') as HTMLElement;
    const youtubeEmbed = container.querySelector('.youtube-embed') as HTMLElement;

    playButton?.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      if (thumbnail && youtubeEmbed) {
        thumbnail.style.display = 'none';
        playButton.style.display = 'none';
        youtubeEmbed.style.display = 'block';
      }
    });
  });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const iframeContainers = document.querySelectorAll('.iframe-container');
        const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

        if (!isTouch) {
            // Desktop behavior
            iframeContainers.forEach((container) => {
                container.classList.add('inactive');
                container.addEventListener('click', () => {
                    container.classList.remove('inactive');
                });
            });
        } else {
            // Touch device behavior
            iframeContainers.forEach((container) => {
                container.classList.remove('inactive');
            });
        }
    });
</script>
